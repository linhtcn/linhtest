// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aaYHt73BmYNG15ode6fw3e
// Component: 1ddg9G74ohTR

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: qx7RVvF0mlF4/component
import { Tabs } from "@plasmicpkgs/antd/skinny/registerTabs";
import { TabPane } from "@plasmicpkgs/antd/skinny/registerTabs";
import { Input } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as Input_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { Button } from "@chakra-ui/react";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { NumberInput } from "@chakra-ui/react";
import { NumberInputStepper } from "@chakra-ui/react";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { TableContainer } from "@chakra-ui/react";
import { Table } from "@chakra-ui/react";
import { Thead } from "@chakra-ui/react";
import { Tr } from "@chakra-ui/react";
import { Th } from "@chakra-ui/react";
import { Td } from "@chakra-ui/react";
import DropIcon from "../../DropIcon"; // plasmic-import: 5Rd6GXG0fC2F/component
import { Tbody } from "@chakra-ui/react";
import Footer from "../../Footer"; // plasmic-import: QTsPnnAShkb-/component

import { useScreenVariants as useScreenVariantsrGwNjL9MkP6 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: R-gwNjL9mkP6/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: 66MC2d9B7YecVEphuUMtqF/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: aaYHt73BmYNG15ode6fw3e/projectcss
import sty from "./PlasmicUserProfile.module.css"; // plasmic-import: 1ddg9G74ohTR/css

import MagnifyingGlassSvgIcon from "./icons/PlasmicIcon__MagnifyingGlassSvg"; // plasmic-import: XAVIBRis7VPN/icon
import CloseSquareSvgIcon from "./icons/PlasmicIcon__CloseSquareSvg"; // plasmic-import: 1baUcJ8ibTsa/icon

createPlasmicElementProxy;

export type PlasmicUserProfile__VariantMembers = {};
export type PlasmicUserProfile__VariantsArgs = {};
type VariantPropType = keyof PlasmicUserProfile__VariantsArgs;
export const PlasmicUserProfile__VariantProps = new Array<VariantPropType>();

export type PlasmicUserProfile__ArgsType = {};
type ArgPropType = keyof PlasmicUserProfile__ArgsType;
export const PlasmicUserProfile__ArgProps = new Array<ArgPropType>();

export type PlasmicUserProfile__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  antdTabs?: Flex__<typeof Tabs>;
  searchNftName?: Flex__<typeof Input>;
  priceSortSelect?: Flex__<typeof AntdSelect>;
  listStatusSelect?: Flex__<typeof AntdSelect>;
  chakraUiButton?: Flex__<typeof Button>;
  listNftModal?: Flex__<typeof AntdModal>;
  chakraUiNumberInput?: Flex__<typeof NumberInput>;
  chakraUiNumberInputStepper?: Flex__<typeof NumberInputStepper>;
  listPriceInput?: Flex__<typeof AntdInputNumber>;
  confirmListingModal?: Flex__<typeof AntdModal>;
  unlistModal?: Flex__<typeof AntdModal>;
  searchNftActivityName?: Flex__<typeof Input>;
  activityTypeSelect?: Flex__<typeof AntdSelect>;
  chakraUiTableContainer?: Flex__<typeof TableContainer>;
  chakraUiTable?: Flex__<typeof Table>;
  chakraUiThead?: Flex__<typeof Thead>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultUserProfileProps {
  className?: string;
}

const $$ = {};

function PlasmicUserProfile__RenderFunc(props: {
  variants: PlasmicUserProfile__VariantsArgs;
  args: PlasmicUserProfile__ArgsType;
  overrides: PlasmicUserProfile__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "antdTabs.activeKey",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "searchNftName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "priceSortSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "priceLowHigh"
      },
      {
        path: "listStatusSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "ALL"
      },
      {
        path: "searchNftActivityName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "activityTypeSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "SOLD"
      },
      {
        path: "collectedNft",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            id: "1149",
            network: "testnet",
            version: "389959602",
            nftId:
              "0xf3e7313b894b6523cb2546aa4168976a3273651fe53752e79138a4a8c93414b0",
            name: "Suinova: suinova #113",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/0ebzB8okTbW6EO1Hcv4Ul0SeK3BIVBtWCJi5CghtJoI",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618094145",
            fields: null,
            createdAt: "2025-04-16T23:05:55.264Z",
            updatedAt: "2025-04-21T17:00:15.264Z",
            isListed: true
          },
          {
            id: "1148",
            network: "testnet",
            version: "389960771",
            nftId:
              "0xedceb0877664d1bfef0d69191a48e88116cf7916e142de429f4149ecfefee8d2",
            name: "Suinova: suinova #130",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/qMWIRfTw7eW77HdNqSlnrbpIR69KcIq2Zc5xjPtew3Y",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618187710",
            fields: null,
            createdAt: "2025-04-16T23:05:55.258Z",
            updatedAt: "2025-04-21T17:00:15.258Z",
            isListed: false
          },
          {
            id: "1147",
            network: "testnet",
            version: "389959373",
            nftId:
              "0xec319cc9d7e761e30081f542ee7e9534bde60a0f183aec862c71761a0dd2121e",
            name: "Suinova: suinova #110",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/ysw7kTe2fV3TXtEsQOqedbwYCnQarv1FZBMeHMn6cKw",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618076375",
            fields: null,
            createdAt: "2025-04-16T23:05:55.253Z",
            updatedAt: "2025-04-21T17:00:15.253Z",
            isListed: true
          },
          {
            id: "1146",
            network: "testnet",
            version: "389959464",
            nftId:
              "0xe709728193dc659af64fbb8e6f76a7343801b577834c30a99b8251af41014dea",
            name: "Suinova: suinova #111",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/wxk6OnYp9c7PL7QjeX-sUNzYt-VeSw0zixb88iaQXjA",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618083031",
            fields: null,
            createdAt: "2025-04-16T23:05:55.247Z",
            updatedAt: "2025-04-21T17:00:15.247Z",
            isListed: false
          },
          {
            id: "1145",
            network: "testnet",
            version: "389960145",
            nftId:
              "0xe4c667a26d1972a81a442b08c65253be72d80ce99902d48d05615498659d0c87",
            name: "Suinova: suinova #121",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/WgUl3WoEN8aCcW8SERooybA3UY-8p4KPiNSXAvHmpsM",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618138321",
            fields: null,
            createdAt: "2025-04-16T23:05:55.242Z",
            updatedAt: "2025-04-21T17:00:15.242Z",
            isListed: true
          },
          {
            id: "1144",
            network: "testnet",
            version: "389956529",
            nftId:
              "0xd94231185f3cd03b11d6f3e49034e83eca0c1788b39964c3190e08cf86e459b0",
            name: "Suinova: suinova #4",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/Xi0cYbJr1ClVwxnEhY91ufKWt2oq22LeSzpwmaKQ8-s",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744617853488",
            fields: null,
            createdAt: "2025-04-16T23:05:55.237Z",
            updatedAt: "2025-04-21T17:00:15.237Z",
            isListed: false
          },
          {
            id: "1143",
            network: "testnet",
            version: "389945709",
            nftId:
              "0xd14d0eb91c8781510424618a4c2fb51ab03070181a1e458bea954bb3cc9675da",
            name: "Suinova: suinova",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744617003255",
            fields: null,
            createdAt: "2025-04-16T23:05:55.232Z",
            updatedAt: "2025-04-21T17:00:15.232Z",
            isListed: true
          },
          {
            id: "1142",
            network: "testnet",
            version: "389958682",
            nftId:
              "0xcc218d790d31edddee0ebc5251bede507d5d0bb57b29a9d732da12e02513d23d",
            name: "Suinova: suinova #100",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/0ebzB8okTbW6EO1Hcv4Ul0SeK3BIVBtWCJi5CghtJoI",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618025608",
            fields: null,
            createdAt: "2025-04-16T23:05:55.226Z",
            updatedAt: "2025-04-21T17:00:15.225Z",
            isListed: false
          },
          {
            id: "1141",
            network: "testnet",
            version: "389958771",
            nftId:
              "0xcb93ed5720fbae440ba38c8bee0dfda52a24d4e808644c89c28f22e713583d92",
            name: "Suinova: suinova #101",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/ysw7kTe2fV3TXtEsQOqedbwYCnQarv1FZBMeHMn6cKw",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618032284",
            fields: null,
            createdAt: "2025-04-16T23:05:54.870Z",
            updatedAt: "2025-04-21T17:00:12.118Z",
            isListed: true
          },
          {
            id: "1140",
            network: "testnet",
            version: "389960964",
            nftId:
              "0xc6edd349d199584a0ea2abf082bd3f1cda38977daf6311a6dfc1d5976385bb73",
            name: "Suinova: suinova #133",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/ilwqBHFUDxJ_r_bk1SmJYZpTnMeDXWG8cg9JoyyKHYs",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618203171",
            fields: null,
            createdAt: "2025-04-16T23:05:54.864Z",
            updatedAt: "2025-04-21T17:00:12.113Z",
            isListed: false
          },
          {
            id: "1139",
            network: "testnet",
            version: "389957707",
            nftId:
              "0xc658fa4d36e3b26353a8d0a88f1424872fa08231ddf76462f68b704a05b223a5",
            name: "Suinova: suinova #1",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/qMWIRfTw7eW77HdNqSlnrbpIR69KcIq2Zc5xjPtew3Y",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744617946664",
            fields: null,
            createdAt: "2025-04-16T23:05:54.859Z",
            updatedAt: "2025-04-21T17:00:12.108Z",
            isListed: true
          },
          {
            id: "1138",
            network: "testnet",
            version: "389961135",
            nftId:
              "0xc1346345c5a7b93e8ecb943dd1e87de9ee5547faf82d6abfb1d2fc0b16a7af62",
            name: "Suinova: suinova #136",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/0ebzB8okTbW6EO1Hcv4Ul0SeK3BIVBtWCJi5CghtJoI",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618219275",
            fields: null,
            createdAt: "2025-04-16T23:05:54.848Z",
            updatedAt: "2025-04-21T17:00:12.102Z",
            isListed: false
          },
          {
            id: "1137",
            network: "testnet",
            version: "389959283",
            nftId:
              "0xc0cb3976ccc09f784ce0a8e9bec3234210224bd370e132f00fc0bd217294003d",
            name: "Suinova: suinova #109",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/ilwqBHFUDxJ_r_bk1SmJYZpTnMeDXWG8cg9JoyyKHYs",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618069846",
            fields: null,
            createdAt: "2025-04-16T23:05:54.841Z",
            updatedAt: "2025-04-21T17:00:12.097Z",
            isListed: true
          },
          {
            id: "1136",
            network: "testnet",
            version: "389960063",
            nftId:
              "0xbf188117be4dc141f69b57b03001b034af17aa1a2c501e2fca6b53814e59588d",
            name: "Suinova: suinova #120",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/WgUl3WoEN8aCcW8SERooybA3UY-8p4KPiNSXAvHmpsM",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618132167",
            fields: null,
            createdAt: "2025-04-16T23:05:54.835Z",
            updatedAt: "2025-04-21T17:00:12.091Z",
            isListed: false
          },
          {
            id: "1135",
            network: "testnet",
            version: "389960349",
            nftId:
              "0xbeefcfa06e2d62fb8bb7b4b677fab5d24e79be1a2c7e2e53294c2e4e6ca93d3a",
            name: "Suinova: suinova #124",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/ilwqBHFUDxJ_r_bk1SmJYZpTnMeDXWG8cg9JoyyKHYs",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618154127",
            fields: null,
            createdAt: "2025-04-16T23:05:54.828Z",
            updatedAt: "2025-04-21T17:00:12.085Z",
            isListed: true
          },
          {
            id: "1134",
            network: "testnet",
            version: "389956475",
            nftId:
              "0xbc4e3d3a115d280b14dc6378228182262a0bf4daaf2edfd9aea81451f2088ab1",
            name: "Suinova: suinova #3",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/6xG2gz-9DtFWRd--DmjC62uIxd9O3RfkTMftof9kHMQ",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744617848647",
            fields: null,
            createdAt: "2025-04-16T23:05:54.822Z",
            updatedAt: "2025-04-21T17:00:12.079Z",
            isListed: false
          }
        ]
      },
      {
        path: "listNftModal[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "listPriceInput[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "confirmListingModal[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "hoverredNft",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "openModal",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "unlistModal[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "activities",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            name: "Distant Galaxy",
            type: "Listed",
            price: 36.99,
            time: "Apr 21, 2024 10:00 PM",
            extraInfo: "90 Hug \u00d7 22 Hug"
          },
          {
            name: "Distant Galaxy",
            type: "Delisted",
            price: 36.99,
            time: "Apr 21, 2024 10:00 PM"
          },
          {
            name: "Distant Galaxy",
            type: "Sold",
            price: 36.99,
            time: "Apr 21, 2024 10:00 PM"
          },
          {
            name: "Distant Galaxy",
            type: "Purchased",
            price: 36.99,
            time: "Apr 21, 2024 10:00 PM"
          },
          {
            name: "Distant Galaxy",
            type: "Listed",
            price: 36.99,
            time: "Apr 21, 2024 10:00 PM"
          },
          {
            name: "Distant Galaxy",
            type: "Listed",
            price: 36.99,
            time: "Apr 21, 2024 10:00 PM"
          }
        ]
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsrGwNjL9MkP6()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_css.plasmic_tokens,
            sty.root
          )}
          onLoad={async event => {
            const $steps = {};

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        const el = document.getElementById("root");
                        console.log("el", el);
                        return (el.style.width = "100%");
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__jsRqe)}>
            <div className={classNames(projectcss.all, sty.freeBox__ryIl1)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zltZc)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__ofTc9)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hThSp)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__coyNd)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kt0Br
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__anW8N
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__jtEI
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__sm6UD
                              )}
                            >
                              {"Total NFTs"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xjZsY
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.collectedNft.length;
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "0";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___93GK6
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fynG
                              )}
                            >
                              {"Total Volume"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pa8Zy
                              )}
                            >
                              {"4k SUI"}
                            </div>
                          </div>
                        </Stack__>
                      </div>
                    </div>
                  </div>
                </div>
              </Stack__>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__yuvY)}>
            <Tabs
              data-plasmic-name={"antdTabs"}
              data-plasmic-override={overrides.antdTabs}
              activeKey={generateStateValueProp($state, [
                "antdTabs",
                "activeKey"
              ])}
              className={classNames("__wab_instance", sty.antdTabs)}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "antdTabs",
                  "activeKey"
                ]).apply(null, eventArgs);
              }}
            >
              <TabPane
                className={classNames(
                  "__wab_instance",
                  sty.antdTabPane___0JqXl
                )}
                key={"1"}
                tab={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__w2TRu
                    )}
                  >
                    {"Collected"}
                  </div>
                }
              >
                <div className={classNames(projectcss.all, sty.freeBox__hso0)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qklDo)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__quMsP)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qwD5M
                        )}
                      >
                        {(() => {
                          const child$Props = {
                            allowClear: true,
                            bordered: false,
                            className: classNames(
                              "__wab_instance",
                              sty.searchNftName
                            ),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["searchNftName", "value"],
                                Input_Helpers
                              ).apply(null, eventArgs);
                            },
                            placeholder: "Search NFT Name",
                            value: generateStateValueProp($state, [
                              "searchNftName",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "searchNftName.value"
                              }
                            ],
                            [],
                            Input_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <Input
                              data-plasmic-name={"searchNftName"}
                              data-plasmic-override={overrides.searchNftName}
                              {...child$Props}
                            />
                          );
                        })()}
                        <MagnifyingGlassSvgIcon
                          className={classNames(projectcss.all, sty.svg__k1F3Y)}
                          role={"img"}
                        />
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rEe54
                        )}
                      >
                        <AntdSelect
                          data-plasmic-name={"priceSortSelect"}
                          data-plasmic-override={overrides.priceSortSelect}
                          allowClear={true}
                          className={classNames(
                            "__wab_instance",
                            sty.priceSortSelect
                          )}
                          defaultOpen={false}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_css.plasmic_tokens
                          )}
                          defaultValue={"priceLowHigh"}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "priceSortSelect",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          optionClassName={classNames({
                            [sty["pcls_j8INLOPof5zc"]]: true
                          })}
                          options={(() => {
                            const __composite = [
                              { value: null, label: null, type: null },
                              { value: null, label: null, type: "option" },
                              { type: null, label: null, value: null },
                              { type: "option", label: null, value: null }
                            ];
                            __composite["0"]["value"] = "priceLowHigh";
                            __composite["0"]["label"] = "Price low-high";
                            __composite["0"]["type"] = "option";
                            __composite["1"]["value"] = "priceHighLow";
                            __composite["1"]["label"] = "Price high-low";
                            __composite["2"]["type"] = "option";
                            __composite["2"]["label"] = "Recently Listed";
                            __composite["2"]["value"] = "recentlyListed";
                            __composite["3"]["label"] = "Recently Sold";
                            __composite["3"]["value"] = "recentlySold";
                            return __composite;
                          })()}
                          placeholder={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__vPchF
                              )}
                            >
                              {"Select..."}
                            </div>
                          }
                          placeholderClassName={classNames({
                            [sty["pcls_mE_tDSID2WzZ"]]: true
                          })}
                          popupClassName={classNames({
                            [sty["pcls_37wSn2tcmeBL"]]: true
                          })}
                          popupScopeClassName={sty["priceSortSelect__popup"]}
                          triggerClassName={classNames({
                            [sty["pcls_WH-3CT23pIqk"]]: true
                          })}
                          useChildren={false}
                          value={generateStateValueProp($state, [
                            "priceSortSelect",
                            "value"
                          ])}
                        />

                        {(() => {
                          try {
                            return true;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <AntdSelect
                            data-plasmic-name={"listStatusSelect"}
                            data-plasmic-override={overrides.listStatusSelect}
                            allowClear={true}
                            className={classNames(
                              "__wab_instance",
                              sty.listStatusSelect
                            )}
                            defaultOpen={false}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_css.plasmic_tokens
                            )}
                            defaultValue={"ALL"}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "listStatusSelect",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            optionClassName={classNames({
                              [sty["pcls_RdLDw-yNPCGC"]]: true
                            })}
                            options={(() => {
                              const __composite = [
                                { value: null, label: null, type: "option" },
                                { type: null, label: null, value: null },
                                { type: "option", label: null, value: null }
                              ];
                              __composite["0"]["value"] = "ALL";
                              __composite["0"]["label"] = "Select All";
                              __composite["1"]["type"] = "option";
                              __composite["1"]["label"] = "Listed";
                              __composite["1"]["value"] = "LISTED";
                              __composite["2"]["label"] = "Not Listed";
                              __composite["2"]["value"] = "NOT_LISTED";
                              return __composite;
                            })()}
                            placeholder={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__xChpR
                                )}
                              >
                                {"Select..."}
                              </div>
                            }
                            placeholderClassName={classNames({
                              [sty["pcls_hPYgeY65jdkT"]]: true
                            })}
                            popupClassName={classNames({
                              [sty["pcls_jLib8KNuhXD0"]]: true
                            })}
                            popupScopeClassName={sty["listStatusSelect__popup"]}
                            triggerClassName={classNames({
                              [sty["pcls_Jf-t7lSE08t6"]]: true
                            })}
                            useChildren={false}
                            value={generateStateValueProp($state, [
                              "listStatusSelect",
                              "value"
                            ])}
                          />
                        ) : null}
                      </Stack__>
                    </Stack__>
                    {(() => {
                      try {
                        return $state.collectedNft.length === 0;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cyn5H
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__u76CQ
                          )}
                        >
                          {"No NFTs Found"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jlgQ3
                          )}
                        >
                          {"It appears that there were no NFTs in your wallet"}
                        </div>
                        <Button
                          data-plasmic-name={"chakraUiButton"}
                          data-plasmic-override={overrides.chakraUiButton}
                          className={classNames(
                            "__wab_instance",
                            sty.chakraUiButton
                          )}
                          variant={"solid"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__jT2N3
                            )}
                          >
                            {"Explore Marketplace"}
                          </div>
                        </Button>
                      </div>
                    ) : null}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ueQ5)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.collectedNft;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__flD0G
                            )}
                            key={currentIndex}
                            onMouseLeave={async event => {
                              const $steps = {};

                              $steps["updateHoverredNft"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["hoverredNft"]
                                      },
                                      operation: 0,
                                      value: ""
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateHoverredNft"] != null &&
                                typeof $steps["updateHoverredNft"] ===
                                  "object" &&
                                typeof $steps["updateHoverredNft"].then ===
                                  "function"
                              ) {
                                $steps["updateHoverredNft"] = await $steps[
                                  "updateHoverredNft"
                                ];
                              }
                            }}
                            onMouseOver={async event => {
                              const $steps = {};

                              $steps["updateHoverredNft"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["hoverredNft"]
                                      },
                                      operation: 0,
                                      value: currentItem.nftId
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateHoverredNft"] != null &&
                                typeof $steps["updateHoverredNft"] ===
                                  "object" &&
                                typeof $steps["updateHoverredNft"].then ===
                                  "function"
                              ) {
                                $steps["updateHoverredNft"] = await $steps[
                                  "updateHoverredNft"
                                ];
                              }
                            }}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__hMmSh)}
                              displayHeight={"auto"}
                              displayMaxHeight={"200px"}
                              displayMaxWidth={"none"}
                              displayMinHeight={"200px"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              onClick={async event => {
                                const $steps = {};

                                $steps["goToNftDetails"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        destination: `/nft-details/${(() => {
                                          try {
                                            return currentItem.nftId;
                                          } catch (e) {
                                            if (e instanceof TypeError) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}`
                                      };
                                      return (({ destination }) => {
                                        if (
                                          typeof destination === "string" &&
                                          destination.startsWith("#")
                                        ) {
                                          document
                                            .getElementById(
                                              destination.substr(1)
                                            )
                                            .scrollIntoView({
                                              behavior: "smooth"
                                            });
                                        } else {
                                          location.assign(destination);
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["goToNftDetails"] != null &&
                                  typeof $steps["goToNftDetails"] ===
                                    "object" &&
                                  typeof $steps["goToNftDetails"].then ===
                                    "function"
                                ) {
                                  $steps["goToNftDetails"] = await $steps[
                                    "goToNftDetails"
                                  ];
                                }
                              }}
                              src={(() => {
                                try {
                                  return currentItem.imageUrl;
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return "https://s3-alpha-sig.figma.com/img/d125/0dcf/43d2a28cf3971315cbc5d8f588f7d3da?Expires=1744588800&Key-Pair-Id=APKAQ4GOSFWCW27IBOMQ&Signature=QCo3rE7lOrN-ynf84KzwxQQi1552o2sj0e-Zkm1u-lqkuVjKB10BiogIbM~tOfyfZqWkpW7c5pM2dBBGIRlg1Qyy~iJ5~9EHfgREFixlns62HXLXaLHFJRTXth2ZEuFJm5sZ0uTdrvmv8cW0oTtZFGpZ2AEy7cPYD8gsMxKXyboiNLVXO301QHK5TPmnVdKrx5kGEqtGvud6OPtqd5Tu19Omt5FqvrW-ZF2WtP2ELeymdquEQ~z9JnGcUy1ZbpYF86djav6ceaTIYpNhuBRJ5Gqp10NSRfbz~AEwfaPPyag2YQrtX9UMu3payh~uHTfm~u8i0YG5T7LLD9ZnmxWdow__";
                                  }
                                  throw e;
                                }
                              })()}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fjCpz
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["goToNftDetails"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        destination: `/nft-details/${(() => {
                                          try {
                                            return currentItem.nftId;
                                          } catch (e) {
                                            if (e instanceof TypeError) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}`
                                      };
                                      return (({ destination }) => {
                                        if (
                                          typeof destination === "string" &&
                                          destination.startsWith("#")
                                        ) {
                                          document
                                            .getElementById(
                                              destination.substr(1)
                                            )
                                            .scrollIntoView({
                                              behavior: "smooth"
                                            });
                                        } else {
                                          location.assign(destination);
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["goToNftDetails"] != null &&
                                  typeof $steps["goToNftDetails"] ===
                                    "object" &&
                                  typeof $steps["goToNftDetails"].then ===
                                    "function"
                                ) {
                                  $steps["goToNftDetails"] = await $steps[
                                    "goToNftDetails"
                                  ];
                                }
                              }}
                            >
                              {"Magic Astronaut #001 "}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__uCWi
                              )}
                            >
                              {"5.67 SUI"}
                            </div>
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.listNftModal
                                ),
                                closeButtonClassName: classNames({
                                  [sty["pcls_t9T6S-FlCK6z"]]: true
                                }),
                                defaultStylesClassName: classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_css.plasmic_tokens
                                ),
                                hideFooter: true,
                                modalScopeClassName: sty["listNftModal__modal"],
                                onOpenChange: async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "listNftModal",
                                    __plasmic_idx_0,
                                    "open"
                                  ]).apply(null, eventArgs);
                                },
                                open: generateStateValueProp($state, [
                                  "listNftModal",
                                  __plasmic_idx_0,
                                  "open"
                                ]),
                                title: (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__cbom6
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__uMoAz
                                      )}
                                    >
                                      {"List For Sale"}
                                    </div>
                                    <CloseSquareSvgIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__dyqRh
                                      )}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["updateOpenModal"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["openModal"]
                                                },
                                                operation: 1
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  undefined
                                                );
                                                return undefined;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateOpenModal"] != null &&
                                          typeof $steps["updateOpenModal"] ===
                                            "object" &&
                                          typeof $steps["updateOpenModal"]
                                            .then === "function"
                                        ) {
                                          $steps["updateOpenModal"] =
                                            await $steps["updateOpenModal"];
                                        }

                                        $steps["updateHoverredNft"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["hoverredNft"]
                                                },
                                                operation: 1
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  undefined
                                                );
                                                return undefined;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateHoverredNft"] != null &&
                                          typeof $steps["updateHoverredNft"] ===
                                            "object" &&
                                          typeof $steps["updateHoverredNft"]
                                            .then === "function"
                                        ) {
                                          $steps["updateHoverredNft"] =
                                            await $steps["updateHoverredNft"];
                                        }

                                        $steps["updateAntdTabsActiveKey"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "antdTabs",
                                                    "activeKey"
                                                  ]
                                                },
                                                operation: 0
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateAntdTabsActiveKey"] !=
                                            null &&
                                          typeof $steps[
                                            "updateAntdTabsActiveKey"
                                          ] === "object" &&
                                          typeof $steps[
                                            "updateAntdTabsActiveKey"
                                          ].then === "function"
                                        ) {
                                          $steps["updateAntdTabsActiveKey"] =
                                            await $steps[
                                              "updateAntdTabsActiveKey"
                                            ];
                                        }
                                      }}
                                      role={"img"}
                                    />
                                  </div>
                                ),
                                trigger: (() => {
                                  try {
                                    return (
                                      !currentItem.isListed &&
                                      currentItem.nftId === $state.hoverredNft
                                    );
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <AntdButton
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__ynWRl
                                    )}
                                    onClick={async () => {
                                      const $steps = {};

                                      $steps["updateOpenModal"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["openModal"]
                                              },
                                              operation: 0,
                                              value: currentItem.nftId
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateOpenModal"] != null &&
                                        typeof $steps["updateOpenModal"] ===
                                          "object" &&
                                        typeof $steps["updateOpenModal"]
                                          .then === "function"
                                      ) {
                                        $steps["updateOpenModal"] =
                                          await $steps["updateOpenModal"];
                                      }
                                    }}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___1Xzcq
                                      )}
                                    >
                                      {"List Now"}
                                    </div>
                                  </AntdButton>
                                ) : null
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "open",
                                    plasmicStateName: "listNftModal[].open"
                                  }
                                ],
                                [__plasmic_idx_0],
                                undefined ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "listNftModal[].open",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      (() => {
                                        try {
                                          return (
                                            currentItem.nftId ===
                                              $state.openModal &&
                                            !currentItem.isListed
                                          );
                                        } catch (e) {
                                          if (e instanceof TypeError) {
                                            return false;
                                          }
                                          throw e;
                                        }
                                      })()
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdModal
                                  data-plasmic-name={"listNftModal"}
                                  data-plasmic-override={overrides.listNftModal}
                                  {...child$Props}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__aVpto
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__bfRhc
                                      )}
                                    >
                                      <PlasmicImg__
                                        alt={""}
                                        className={classNames(sty.img__rIB)}
                                        displayHeight={"200px"}
                                        displayMaxHeight={"200px"}
                                        displayMaxWidth={"200px"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"200px"}
                                        loading={"lazy"}
                                        src={(() => {
                                          try {
                                            return currentItem.imageUrl;
                                          } catch (e) {
                                            if (e instanceof TypeError) {
                                              return "https://s3-alpha-sig.figma.com/img/d125/0dcf/43d2a28cf3971315cbc5d8f588f7d3da?Expires=1745798400&Key-Pair-Id=APKAQ4GOSFWCW27IBOMQ&Signature=jlFpFkg-JrnBjVGgNduF4yyHZL5zsQ77AOdDMB5e6VFI-oZFqVC0pHEIuu2a8IaTtOb6SdQLiiXAJEXw8XeQdOLz5nqQGXggSH6yepK0-H6PJS~glxsdccbr-kmEyOXqVcf~WSZ7GUAXDSEy-NolZkxmLnHV0M~S4m7Vuj0owIPqrGvO2o~JBBM71Sc6P7AE~j4lQR7vpoaPsXQV7Be5iXM2163Xok3yST2ZPjLeISclrOZ~FBcKjAmZcatSDeIFbi~pHmc9uE30Odb2IJDGqBA2VRiza0OVGGvobhvKnCcFpoNiYFP56IjHZRV2pRJmucD6OX~D7bMpFkdgRif3Qg__";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      />

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__khH1U
                                        )}
                                      >
                                        {""}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__ivVkm
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__w7Z6H
                                          )}
                                        >
                                          {""}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__ilLwy
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__sIrob
                                            )}
                                          >
                                            {"Listing Price"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__vfOql
                                            )}
                                          >
                                            <PlasmicImg__
                                              alt={""}
                                              className={classNames(
                                                sty.img__wgBby
                                              )}
                                              displayHeight={"16px"}
                                              displayMaxHeight={"none"}
                                              displayMaxWidth={"100%"}
                                              displayMinHeight={"0"}
                                              displayMinWidth={"0"}
                                              displayWidth={"13px"}
                                              loading={"lazy"}
                                              src={
                                                "https://suinova.var-meta.com/static/img/water-drop.png"
                                              }
                                            />

                                            <NumberInput
                                              data-plasmic-name={
                                                "chakraUiNumberInput"
                                              }
                                              data-plasmic-override={
                                                overrides.chakraUiNumberInput
                                              }
                                              className={classNames(
                                                "__wab_instance",
                                                sty.chakraUiNumberInput
                                              )}
                                              errorBorderColor={"red.500"}
                                              focusBorderColor={"blue.500"}
                                            >
                                              <NumberInputStepper
                                                data-plasmic-name={
                                                  "chakraUiNumberInputStepper"
                                                }
                                                data-plasmic-override={
                                                  overrides.chakraUiNumberInputStepper
                                                }
                                                children={null}
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.chakraUiNumberInputStepper
                                                )}
                                              />
                                            </NumberInput>
                                            {(() => {
                                              const child$Props = {
                                                bordered: false,
                                                className: classNames(
                                                  "__wab_instance",
                                                  sty.listPriceInput
                                                ),
                                                min: 0,
                                                onChange: async (
                                                  ...eventArgs: any
                                                ) => {
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    [
                                                      "listPriceInput",
                                                      __plasmic_idx_0,
                                                      "value"
                                                    ]
                                                  ).apply(null, eventArgs);
                                                },
                                                type: "number",
                                                value: generateStateValueProp(
                                                  $state,
                                                  [
                                                    "listPriceInput",
                                                    __plasmic_idx_0,
                                                    "value"
                                                  ]
                                                )
                                              };
                                              initializeCodeComponentStates(
                                                $state,
                                                [
                                                  {
                                                    name: "value",
                                                    plasmicStateName:
                                                      "listPriceInput[].value"
                                                  }
                                                ],
                                                [__plasmic_idx_0],
                                                undefined ?? {},
                                                child$Props
                                              );
                                              initializePlasmicStates(
                                                $state,
                                                [
                                                  {
                                                    name: "listPriceInput[].value",
                                                    initFunc: ({
                                                      $props,
                                                      $state,
                                                      $queries
                                                    }) => undefined
                                                  }
                                                ],
                                                [__plasmic_idx_0]
                                              );
                                              return (
                                                <AntdInputNumber
                                                  data-plasmic-name={
                                                    "listPriceInput"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.listPriceInput
                                                  }
                                                  {...child$Props}
                                                />
                                              );
                                            })()}
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__tQ8T
                                              )}
                                            >
                                              {"SUI"}
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                      <Stack__
                                        as={"div"}
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__wmKjn
                                        )}
                                      >
                                        {(() => {
                                          try {
                                            return !$state.listPriceInput[
                                              currentIndex
                                            ].value;
                                          } catch (e) {
                                            if (e instanceof TypeError) {
                                              return true;
                                            }
                                            throw e;
                                          }
                                        })() ? (
                                          <AntdButton
                                            className={classNames(
                                              "__wab_instance",
                                              sty.button__ymk8L
                                            )}
                                            disabled={true}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__hycsG
                                              )}
                                            >
                                              {"Next"}
                                            </div>
                                          </AntdButton>
                                        ) : null}
                                      </Stack__>
                                      {(() => {
                                        const child$Props = {
                                          className: classNames(
                                            "__wab_instance",
                                            sty.confirmListingModal
                                          ),
                                          closeButtonClassName: classNames({
                                            [sty["pcls_nEr78LIGi9-3"]]: true
                                          }),
                                          defaultStylesClassName: classNames(
                                            projectcss.root_reset,
                                            projectcss.plasmic_default_styles,
                                            projectcss.plasmic_mixins,
                                            projectcss.plasmic_tokens,
                                            plasmic_antd_5_css.plasmic_tokens
                                          ),
                                          hideFooter: true,
                                          modalScopeClassName:
                                            sty["confirmListingModal__modal"],
                                          onOpenChange: async (
                                            ...eventArgs: any
                                          ) => {
                                            generateStateOnChangeProp($state, [
                                              "confirmListingModal",
                                              __plasmic_idx_0,
                                              "open"
                                            ]).apply(null, eventArgs);
                                          },
                                          open: generateStateValueProp($state, [
                                            "confirmListingModal",
                                            __plasmic_idx_0,
                                            "open"
                                          ]),
                                          title: (
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__kkccI
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__ndzKl
                                                )}
                                              >
                                                {"Confirm Listing"}
                                              </div>
                                              <CloseSquareSvgIcon
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.svg___0HpTf
                                                )}
                                                onClick={async event => {
                                                  const $steps = {};

                                                  $steps["runCode"] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          customFunction:
                                                            async () => {
                                                              return ($state.confirmListingModal[
                                                                currentIndex
                                                              ].open = false);
                                                            }
                                                        };
                                                        return (({
                                                          customFunction
                                                        }) => {
                                                          return customFunction();
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps["runCode"] != null &&
                                                    typeof $steps["runCode"] ===
                                                      "object" &&
                                                    typeof $steps["runCode"]
                                                      .then === "function"
                                                  ) {
                                                    $steps["runCode"] =
                                                      await $steps["runCode"];
                                                  }
                                                }}
                                                role={"img"}
                                              />
                                            </div>
                                          ),
                                          trigger: (() => {
                                            try {
                                              return !!$state.listPriceInput[
                                                currentIndex
                                              ].value;
                                            } catch (e) {
                                              if (e instanceof TypeError) {
                                                return true;
                                              }
                                              throw e;
                                            }
                                          })() ? (
                                            <AntdButton
                                              className={classNames(
                                                "__wab_instance",
                                                sty.button__z6Url
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__cwR
                                                )}
                                              >
                                                {"Next"}
                                              </div>
                                            </AntdButton>
                                          ) : null
                                        };
                                        initializeCodeComponentStates(
                                          $state,
                                          [
                                            {
                                              name: "open",
                                              plasmicStateName:
                                                "confirmListingModal[].open"
                                            }
                                          ],
                                          [__plasmic_idx_0],
                                          undefined ?? {},
                                          child$Props
                                        );
                                        initializePlasmicStates(
                                          $state,
                                          [
                                            {
                                              name: "confirmListingModal[].open",
                                              initFunc: ({
                                                $props,
                                                $state,
                                                $queries
                                              }) => false
                                            }
                                          ],
                                          [__plasmic_idx_0]
                                        );
                                        return (
                                          <AntdModal
                                            data-plasmic-name={
                                              "confirmListingModal"
                                            }
                                            data-plasmic-override={
                                              overrides.confirmListingModal
                                            }
                                            {...child$Props}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__fNqRv
                                              )}
                                            >
                                              <PlasmicImg__
                                                alt={""}
                                                className={classNames(
                                                  sty.img__vPmzG
                                                )}
                                                displayHeight={"auto"}
                                                displayMaxHeight={"200px"}
                                                displayMaxWidth={"200px"}
                                                displayMinHeight={"0"}
                                                displayMinWidth={"0"}
                                                displayWidth={"auto"}
                                                loading={"lazy"}
                                                src={(() => {
                                                  try {
                                                    return currentItem.imageUrl;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError
                                                    ) {
                                                      return "https://s3-alpha-sig.figma.com/img/d125/0dcf/43d2a28cf3971315cbc5d8f588f7d3da?Expires=1745798400&Key-Pair-Id=APKAQ4GOSFWCW27IBOMQ&Signature=jlFpFkg-JrnBjVGgNduF4yyHZL5zsQ77AOdDMB5e6VFI-oZFqVC0pHEIuu2a8IaTtOb6SdQLiiXAJEXw8XeQdOLz5nqQGXggSH6yepK0-H6PJS~glxsdccbr-kmEyOXqVcf~WSZ7GUAXDSEy-NolZkxmLnHV0M~S4m7Vuj0owIPqrGvO2o~JBBM71Sc6P7AE~j4lQR7vpoaPsXQV7Be5iXM2163Xok3yST2ZPjLeISclrOZ~FBcKjAmZcatSDeIFbi~pHmc9uE30Odb2IJDGqBA2VRiza0OVGGvobhvKnCcFpoNiYFP56IjHZRV2pRJmucD6OX~D7bMpFkdgRif3Qg__";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              />

                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__ecma0
                                                )}
                                              >
                                                {""}
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__kE6Ua
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__yH1E4
                                                  )}
                                                >
                                                  {""}
                                                </div>
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.freeBox__mTudL
                                                  )}
                                                >
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      sty.freeBox__snq6T
                                                    )}
                                                  >
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text__nsL2
                                                      )}
                                                    >
                                                      {"Listing Price"}
                                                    </div>
                                                    <Stack__
                                                      as={"div"}
                                                      hasGap={true}
                                                      className={classNames(
                                                        projectcss.all,
                                                        sty.freeBox__hDgSt
                                                      )}
                                                    >
                                                      <PlasmicImg__
                                                        alt={""}
                                                        className={classNames(
                                                          sty.img___7Z1GQ
                                                        )}
                                                        displayHeight={"auto"}
                                                        displayMaxHeight={
                                                          "none"
                                                        }
                                                        displayMaxWidth={"100%"}
                                                        displayMinHeight={"0"}
                                                        displayMinWidth={"0"}
                                                        displayWidth={"auto"}
                                                        height={"16px"}
                                                        loading={"lazy"}
                                                        src={
                                                          "https://s3-alpha-sig.figma.com/img/d0c4/ee53/c47056db6cc7fc22e11023a90f3439cf?Expires=1745798400&Key-Pair-Id=APKAQ4GOSFWCW27IBOMQ&Signature=kQ6yVrGzCA1pHyRfRflxGiEqMfqg69KVExhe8YqkbRFbYdf46goQI2Rov3zlnWCRzMgH8VRtzsao5svDz3d~XS-kPrxYmQGVz8AO597uv~QSSkq2wQAhVRYxulGZ6XBvET~z39DelK0BD2RcHbRYOGEGbtNts2qKsYrZXmcySmON3NuOZEcFGbveXMEchI-9GAYyPt64Igr2K8Oh5Xvm4R3RVlLcWO3g58~DLRmkKV1thVWA2BDIJeFejNxffySi8DVxkd50HEJNNZHH~-~v67ZSOI7j9QhmARDEhTPGNIz2nXJ0Lxn-UG54hrUt~a7pYFged~iucwZjqB2asfFFww__"
                                                        }
                                                        width={"13px"}
                                                      />

                                                      <div
                                                        className={classNames(
                                                          projectcss.all,
                                                          projectcss.__wab_text,
                                                          sty.text__mXRjF
                                                        )}
                                                      >
                                                        <React.Fragment>
                                                          {(() => {
                                                            try {
                                                              return $state
                                                                .listPriceInput[
                                                                currentIndex
                                                              ].value;
                                                            } catch (e) {
                                                              if (
                                                                e instanceof
                                                                TypeError
                                                              ) {
                                                                return "0.3";
                                                              }
                                                              throw e;
                                                            }
                                                          })()}
                                                        </React.Fragment>
                                                      </div>
                                                    </Stack__>
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      sty.freeBox___9KBtM
                                                    )}
                                                  >
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text___6W2Y
                                                      )}
                                                    >
                                                      {"Creator Earnings 1.5%"}
                                                    </div>
                                                    <Stack__
                                                      as={"div"}
                                                      hasGap={true}
                                                      className={classNames(
                                                        projectcss.all,
                                                        sty.freeBox__vkViL
                                                      )}
                                                    >
                                                      <PlasmicImg__
                                                        alt={""}
                                                        className={classNames(
                                                          sty.img___7C8Px
                                                        )}
                                                        displayHeight={"auto"}
                                                        displayMaxHeight={
                                                          "none"
                                                        }
                                                        displayMaxWidth={"100%"}
                                                        displayMinHeight={"0"}
                                                        displayMinWidth={"0"}
                                                        displayWidth={"auto"}
                                                        height={"16px"}
                                                        loading={"lazy"}
                                                        src={
                                                          "https://s3-alpha-sig.figma.com/img/d0c4/ee53/c47056db6cc7fc22e11023a90f3439cf?Expires=1745798400&Key-Pair-Id=APKAQ4GOSFWCW27IBOMQ&Signature=kQ6yVrGzCA1pHyRfRflxGiEqMfqg69KVExhe8YqkbRFbYdf46goQI2Rov3zlnWCRzMgH8VRtzsao5svDz3d~XS-kPrxYmQGVz8AO597uv~QSSkq2wQAhVRYxulGZ6XBvET~z39DelK0BD2RcHbRYOGEGbtNts2qKsYrZXmcySmON3NuOZEcFGbveXMEchI-9GAYyPt64Igr2K8Oh5Xvm4R3RVlLcWO3g58~DLRmkKV1thVWA2BDIJeFejNxffySi8DVxkd50HEJNNZHH~-~v67ZSOI7j9QhmARDEhTPGNIz2nXJ0Lxn-UG54hrUt~a7pYFged~iucwZjqB2asfFFww__"
                                                        }
                                                        width={"13px"}
                                                      />

                                                      <div
                                                        className={classNames(
                                                          projectcss.all,
                                                          projectcss.__wab_text,
                                                          sty.text__zndQh
                                                        )}
                                                      >
                                                        {"0.3"}
                                                      </div>
                                                    </Stack__>
                                                  </div>
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      sty.freeBox__vwcWm
                                                    )}
                                                  >
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text__idvkU
                                                      )}
                                                    >
                                                      {
                                                        "Total Potential Earnings"
                                                      }
                                                    </div>
                                                    <Stack__
                                                      as={"div"}
                                                      hasGap={true}
                                                      className={classNames(
                                                        projectcss.all,
                                                        sty.freeBox__coSoc
                                                      )}
                                                    >
                                                      <PlasmicImg__
                                                        alt={""}
                                                        className={classNames(
                                                          sty.img__izX8
                                                        )}
                                                        displayHeight={"auto"}
                                                        displayMaxHeight={
                                                          "none"
                                                        }
                                                        displayMaxWidth={"100%"}
                                                        displayMinHeight={"0"}
                                                        displayMinWidth={"0"}
                                                        displayWidth={"auto"}
                                                        height={"16px"}
                                                        loading={"lazy"}
                                                        src={
                                                          "https://s3-alpha-sig.figma.com/img/d0c4/ee53/c47056db6cc7fc22e11023a90f3439cf?Expires=1745798400&Key-Pair-Id=APKAQ4GOSFWCW27IBOMQ&Signature=kQ6yVrGzCA1pHyRfRflxGiEqMfqg69KVExhe8YqkbRFbYdf46goQI2Rov3zlnWCRzMgH8VRtzsao5svDz3d~XS-kPrxYmQGVz8AO597uv~QSSkq2wQAhVRYxulGZ6XBvET~z39DelK0BD2RcHbRYOGEGbtNts2qKsYrZXmcySmON3NuOZEcFGbveXMEchI-9GAYyPt64Igr2K8Oh5Xvm4R3RVlLcWO3g58~DLRmkKV1thVWA2BDIJeFejNxffySi8DVxkd50HEJNNZHH~-~v67ZSOI7j9QhmARDEhTPGNIz2nXJ0Lxn-UG54hrUt~a7pYFged~iucwZjqB2asfFFww__"
                                                        }
                                                        width={"13px"}
                                                      />

                                                      <div
                                                        className={classNames(
                                                          projectcss.all,
                                                          projectcss.__wab_text,
                                                          sty.text__jywkW
                                                        )}
                                                      >
                                                        <React.Fragment>
                                                          {(() => {
                                                            try {
                                                              return (
                                                                ($state
                                                                  .listPriceInput[
                                                                  currentIndex
                                                                ].value || 0) -
                                                                ($state
                                                                  .listPriceInput[
                                                                  currentIndex
                                                                ].value || 0) *
                                                                  0.015
                                                              ).toFixed(2);
                                                            } catch (e) {
                                                              if (
                                                                e instanceof
                                                                TypeError
                                                              ) {
                                                                return "0.3";
                                                              }
                                                              throw e;
                                                            }
                                                          })()}
                                                        </React.Fragment>
                                                      </div>
                                                    </Stack__>
                                                  </div>
                                                </div>
                                              </div>
                                              <Stack__
                                                as={"div"}
                                                hasGap={true}
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__iwaeK
                                                )}
                                              >
                                                <AntdButton
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.button___9B2Pi
                                                  )}
                                                  onClick={async () => {
                                                    const $steps = {};

                                                    $steps["runCode"] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            customFunction:
                                                              async () => {
                                                                return ($state.confirmListingModal[
                                                                  currentIndex
                                                                ].open = false);
                                                              }
                                                          };
                                                          return (({
                                                            customFunction
                                                          }) => {
                                                            return customFunction();
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps["runCode"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "runCode"
                                                      ] === "object" &&
                                                      typeof $steps["runCode"]
                                                        .then === "function"
                                                    ) {
                                                      $steps["runCode"] =
                                                        await $steps["runCode"];
                                                    }
                                                  }}
                                                >
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text___99ACk
                                                    )}
                                                  >
                                                    {"Back"}
                                                  </div>
                                                </AntdButton>
                                                <AntdButton
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.button___3Krkz
                                                  )}
                                                  onClick={async () => {
                                                    const $steps = {};

                                                    $steps["updateOpenModal"] =
                                                      true
                                                        ? (() => {
                                                            const actionArgs = {
                                                              variable: {
                                                                objRoot: $state,
                                                                variablePath: [
                                                                  "openModal"
                                                                ]
                                                              },
                                                              operation: 1
                                                            };
                                                            return (({
                                                              variable,
                                                              value,
                                                              startIndex,
                                                              deleteCount
                                                            }) => {
                                                              if (!variable) {
                                                                return;
                                                              }
                                                              const {
                                                                objRoot,
                                                                variablePath
                                                              } = variable;

                                                              $stateSet(
                                                                objRoot,
                                                                variablePath,
                                                                undefined
                                                              );
                                                              return undefined;
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "updateOpenModal"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateOpenModal"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateOpenModal"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateOpenModal"
                                                      ] = await $steps[
                                                        "updateOpenModal"
                                                      ];
                                                    }

                                                    $steps[
                                                      "updateHoverredNft"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "hoverredNft"
                                                              ]
                                                            },
                                                            operation: 1
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              undefined
                                                            );
                                                            return undefined;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "updateHoverredNft"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateHoverredNft"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateHoverredNft"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateHoverredNft"
                                                      ] = await $steps[
                                                        "updateHoverredNft"
                                                      ];
                                                    }

                                                    $steps[
                                                      "invokeGlobalAction"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            args: [
                                                              "success",
                                                              "List NFT successfully",
                                                              undefined,
                                                              2
                                                            ]
                                                          };
                                                          return $globalActions[
                                                            "plasmic-antd5-config-provider.showNotification"
                                                          ]?.apply(null, [
                                                            ...actionArgs.args
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "invokeGlobalAction"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "invokeGlobalAction"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "invokeGlobalAction"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "invokeGlobalAction"
                                                      ] = await $steps[
                                                        "invokeGlobalAction"
                                                      ];
                                                    }

                                                    $steps["runCode"] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            customFunction:
                                                              async () => {
                                                                return ($state.confirmListingModal[
                                                                  currentIndex
                                                                ].open = false);
                                                              }
                                                          };
                                                          return (({
                                                            customFunction
                                                          }) => {
                                                            return customFunction();
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps["runCode"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "runCode"
                                                      ] === "object" &&
                                                      typeof $steps["runCode"]
                                                        .then === "function"
                                                    ) {
                                                      $steps["runCode"] =
                                                        await $steps["runCode"];
                                                    }
                                                  }}
                                                >
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__u3YFh
                                                    )}
                                                  >
                                                    {"Confirm"}
                                                  </div>
                                                </AntdButton>
                                              </Stack__>
                                            </div>
                                          </AntdModal>
                                        );
                                      })()}
                                    </div>
                                  </div>
                                </AntdModal>
                              );
                            })()}
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.unlistModal
                                ),
                                closeButtonClassName: classNames({
                                  [sty["pcls_hQTMkKaf3NCV"]]: true
                                }),
                                defaultStylesClassName: classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_css.plasmic_tokens
                                ),
                                hideFooter: true,
                                modalScopeClassName: sty["unlistModal__modal"],
                                onOpenChange: async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "unlistModal",
                                    __plasmic_idx_0,
                                    "open"
                                  ]).apply(null, eventArgs);
                                },
                                open: generateStateValueProp($state, [
                                  "unlistModal",
                                  __plasmic_idx_0,
                                  "open"
                                ]),
                                title: (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__shMgU
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__jKvKe
                                      )}
                                    >
                                      {"Cancel Listing"}
                                    </div>
                                    <CloseSquareSvgIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__kt3L8
                                      )}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["updateOpenModal"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["openModal"]
                                                },
                                                operation: 0,
                                                value: ""
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateOpenModal"] != null &&
                                          typeof $steps["updateOpenModal"] ===
                                            "object" &&
                                          typeof $steps["updateOpenModal"]
                                            .then === "function"
                                        ) {
                                          $steps["updateOpenModal"] =
                                            await $steps["updateOpenModal"];
                                        }

                                        $steps["updateHoverredNft"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["hoverredNft"]
                                                },
                                                operation: 0,
                                                value: ""
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateHoverredNft"] != null &&
                                          typeof $steps["updateHoverredNft"] ===
                                            "object" &&
                                          typeof $steps["updateHoverredNft"]
                                            .then === "function"
                                        ) {
                                          $steps["updateHoverredNft"] =
                                            await $steps["updateHoverredNft"];
                                        }
                                      }}
                                      role={"img"}
                                    />
                                  </div>
                                ),
                                trigger: (() => {
                                  try {
                                    return (
                                      currentItem.isListed &&
                                      currentItem.nftId === $state.hoverredNft
                                    );
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <AntdButton
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button___4T1La
                                    )}
                                    onClick={async () => {
                                      const $steps = {};

                                      $steps["updateOpenModal"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["openModal"]
                                              },
                                              operation: 0,
                                              value: currentItem.nftId
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateOpenModal"] != null &&
                                        typeof $steps["updateOpenModal"] ===
                                          "object" &&
                                        typeof $steps["updateOpenModal"]
                                          .then === "function"
                                      ) {
                                        $steps["updateOpenModal"] =
                                          await $steps["updateOpenModal"];
                                      }
                                    }}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__onJh
                                      )}
                                    >
                                      {"Cancel listing"}
                                    </div>
                                  </AntdButton>
                                ) : null
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "open",
                                    plasmicStateName: "unlistModal[].open"
                                  }
                                ],
                                [__plasmic_idx_0],
                                undefined ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "unlistModal[].open",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      (() => {
                                        try {
                                          return (
                                            currentItem.nftId ===
                                              $state.openModal &&
                                            currentItem.isListed
                                          );
                                        } catch (e) {
                                          if (e instanceof TypeError) {
                                            return false;
                                          }
                                          throw e;
                                        }
                                      })()
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdModal
                                  data-plasmic-name={"unlistModal"}
                                  data-plasmic-override={overrides.unlistModal}
                                  {...child$Props}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__tbcgP
                                    )}
                                  >
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__mPvm1)}
                                      displayHeight={"auto"}
                                      displayMaxHeight={"200px"}
                                      displayMaxWidth={"200px"}
                                      displayMinHeight={"200px"}
                                      displayMinWidth={"200px"}
                                      displayWidth={"auto"}
                                      loading={"lazy"}
                                      src={(() => {
                                        try {
                                          return currentItem.imageUrl;
                                        } catch (e) {
                                          if (e instanceof TypeError) {
                                            return "https://s3-alpha-sig.figma.com/img/d125/0dcf/43d2a28cf3971315cbc5d8f588f7d3da?Expires=1745798400&Key-Pair-Id=APKAQ4GOSFWCW27IBOMQ&Signature=jlFpFkg-JrnBjVGgNduF4yyHZL5zsQ77AOdDMB5e6VFI-oZFqVC0pHEIuu2a8IaTtOb6SdQLiiXAJEXw8XeQdOLz5nqQGXggSH6yepK0-H6PJS~glxsdccbr-kmEyOXqVcf~WSZ7GUAXDSEy-NolZkxmLnHV0M~S4m7Vuj0owIPqrGvO2o~JBBM71Sc6P7AE~j4lQR7vpoaPsXQV7Be5iXM2163Xok3yST2ZPjLeISclrOZ~FBcKjAmZcatSDeIFbi~pHmc9uE30Odb2IJDGqBA2VRiza0OVGGvobhvKnCcFpoNiYFP56IjHZRV2pRJmucD6OX~D7bMpFkdgRif3Qg__";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    />

                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__vlRrG
                                      )}
                                    >
                                      {""}
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___16MsT
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__wQ0Qf
                                        )}
                                      >
                                        {"Listing Price"}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__lH0De
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(
                                            sty.img___8TghO
                                          )}
                                          displayHeight={"auto"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"100%"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"auto"}
                                          height={"16px"}
                                          loading={"lazy"}
                                          src={
                                            "https://suinova.var-meta.com/static/img/water-drop.png"
                                          }
                                          width={"13px"}
                                        />

                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__zQjf9
                                          )}
                                        >
                                          {"20"}
                                        </div>
                                      </div>
                                    </div>
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__o7UL
                                      )}
                                    >
                                      <AntdButton
                                        className={classNames(
                                          "__wab_instance",
                                          sty.button__dWnLq
                                        )}
                                        onClick={async () => {
                                          const $steps = {};

                                          $steps["updateOpenModal"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: ["openModal"]
                                                  },
                                                  operation: 1
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    undefined
                                                  );
                                                  return undefined;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateOpenModal"] != null &&
                                            typeof $steps["updateOpenModal"] ===
                                              "object" &&
                                            typeof $steps["updateOpenModal"]
                                              .then === "function"
                                          ) {
                                            $steps["updateOpenModal"] =
                                              await $steps["updateOpenModal"];
                                          }

                                          $steps["updateHoverredNft"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "hoverredNft"
                                                    ]
                                                  },
                                                  operation: 1
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    undefined
                                                  );
                                                  return undefined;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateHoverredNft"] !=
                                              null &&
                                            typeof $steps[
                                              "updateHoverredNft"
                                            ] === "object" &&
                                            typeof $steps["updateHoverredNft"]
                                              .then === "function"
                                          ) {
                                            $steps["updateHoverredNft"] =
                                              await $steps["updateHoverredNft"];
                                          }

                                          $steps["updateAntdTabsActiveKey"] =
                                            true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "antdTabs",
                                                        "activeKey"
                                                      ]
                                                    },
                                                    operation: 0
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                          if (
                                            $steps["updateAntdTabsActiveKey"] !=
                                              null &&
                                            typeof $steps[
                                              "updateAntdTabsActiveKey"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateAntdTabsActiveKey"
                                            ].then === "function"
                                          ) {
                                            $steps["updateAntdTabsActiveKey"] =
                                              await $steps[
                                                "updateAntdTabsActiveKey"
                                              ];
                                          }
                                        }}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__fodn1
                                          )}
                                        >
                                          {"Cancel"}
                                        </div>
                                      </AntdButton>
                                      <AntdButton
                                        className={classNames(
                                          "__wab_instance",
                                          sty.button__dSQzn
                                        )}
                                        onClick={async () => {
                                          const $steps = {};

                                          $steps["updateOpenModal"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: ["openModal"]
                                                  },
                                                  operation: 1
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    undefined
                                                  );
                                                  return undefined;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateOpenModal"] != null &&
                                            typeof $steps["updateOpenModal"] ===
                                              "object" &&
                                            typeof $steps["updateOpenModal"]
                                              .then === "function"
                                          ) {
                                            $steps["updateOpenModal"] =
                                              await $steps["updateOpenModal"];
                                          }

                                          $steps["updateHoverredNft"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "hoverredNft"
                                                    ]
                                                  },
                                                  operation: 1
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    undefined
                                                  );
                                                  return undefined;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateHoverredNft"] !=
                                              null &&
                                            typeof $steps[
                                              "updateHoverredNft"
                                            ] === "object" &&
                                            typeof $steps["updateHoverredNft"]
                                              .then === "function"
                                          ) {
                                            $steps["updateHoverredNft"] =
                                              await $steps["updateHoverredNft"];
                                          }

                                          $steps["invokeGlobalAction"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "success",
                                                    "Cancel Listing successfully",
                                                    undefined,
                                                    2
                                                  ]
                                                };
                                                return $globalActions[
                                                  "plasmic-antd5-config-provider.showNotification"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["invokeGlobalAction"] !=
                                              null &&
                                            typeof $steps[
                                              "invokeGlobalAction"
                                            ] === "object" &&
                                            typeof $steps["invokeGlobalAction"]
                                              .then === "function"
                                          ) {
                                            $steps["invokeGlobalAction"] =
                                              await $steps[
                                                "invokeGlobalAction"
                                              ];
                                          }
                                        }}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__qIKr9
                                          )}
                                        >
                                          {"Cancel Listing"}
                                        </div>
                                      </AntdButton>
                                    </Stack__>
                                  </div>
                                </AntdModal>
                              );
                            })()}
                          </div>
                        );
                      })}
                    </div>
                    {(() => {
                      try {
                        return $state.collectedNft.length > 0;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fjyZi
                        )}
                      />
                    ) : null}
                  </div>
                </div>
              </TabPane>
              <TabPane
                className={classNames("__wab_instance", sty.antdTabPane__j3K00)}
                key={"2"}
                tab={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rYcbm
                    )}
                  >
                    {"Activity"}
                  </div>
                }
              >
                <div className={classNames(projectcss.all, sty.freeBox__ihzWb)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tkmhy)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__n9NlZ)}
                    >
                      {(() => {
                        const child$Props = {
                          allowClear: true,
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.searchNftActivityName
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["searchNftActivityName", "value"],
                              Input_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: "Search NFT Name",
                          value: generateStateValueProp($state, [
                            "searchNftActivityName",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "searchNftActivityName.value"
                            }
                          ],
                          [],
                          Input_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <Input
                            data-plasmic-name={"searchNftActivityName"}
                            data-plasmic-override={
                              overrides.searchNftActivityName
                            }
                            {...child$Props}
                          />
                        );
                      })()}
                      <MagnifyingGlassSvgIcon
                        className={classNames(projectcss.all, sty.svg__ogbWd)}
                        role={"img"}
                      />
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___5CCxp
                      )}
                    >
                      <AntdSelect
                        data-plasmic-name={"activityTypeSelect"}
                        data-plasmic-override={overrides.activityTypeSelect}
                        allowClear={true}
                        className={classNames(
                          "__wab_instance",
                          sty.activityTypeSelect
                        )}
                        defaultOpen={false}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_css.plasmic_tokens
                        )}
                        defaultValue={"SOLD"}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "activityTypeSelect",
                            "value"
                          ]).apply(null, eventArgs);
                        }}
                        optionClassName={classNames({
                          [sty["pcls_Is8FT6Zz-RqZ"]]: true
                        })}
                        options={(() => {
                          const __composite = [
                            { type: null, label: null, value: null },
                            { value: null, label: null, type: "option" },
                            { type: "option", label: null, value: null },
                            { type: "option", value: null, label: null },
                            { type: "option" }
                          ];
                          __composite["0"]["type"] = "option";
                          __composite["0"]["label"] = "Listed";
                          __composite["0"]["value"] = "LISTED";
                          __composite["1"]["value"] = "NOT_LISTED";
                          __composite["1"]["label"] = "Delisted";
                          __composite["2"]["label"] = "Sold";
                          __composite["2"]["value"] = "SOLD";
                          __composite["3"]["value"] = "PURCHASED";
                          __composite["3"]["label"] = "Purchased";
                          return __composite;
                        })()}
                        placeholder={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bNpHf
                            )}
                          >
                            {"Select..."}
                          </div>
                        }
                        placeholderClassName={classNames({
                          [sty["pcls_mrFfnsGMobtl"]]: true
                        })}
                        popupClassName={classNames({
                          [sty["pcls_khc_HvVvmcZI"]]: true
                        })}
                        popupScopeClassName={sty["activityTypeSelect__popup"]}
                        triggerClassName={classNames({
                          [sty["pcls_nbFf4RbF5CDW"]]: true
                        })}
                        useChildren={false}
                        value={generateStateValueProp($state, [
                          "activityTypeSelect",
                          "value"
                        ])}
                      />
                    </Stack__>
                  </div>
                  <TableContainer
                    data-plasmic-name={"chakraUiTableContainer"}
                    data-plasmic-override={overrides.chakraUiTableContainer}
                    className={classNames(
                      "__wab_instance",
                      sty.chakraUiTableContainer
                    )}
                  >
                    <Table
                      data-plasmic-name={"chakraUiTable"}
                      data-plasmic-override={overrides.chakraUiTable}
                      className={classNames(
                        "__wab_instance",
                        sty.chakraUiTable
                      )}
                      colorScheme={"gray"}
                      size={"md"}
                      variant={"simple"}
                    >
                      <Thead
                        data-plasmic-name={"chakraUiThead"}
                        data-plasmic-override={overrides.chakraUiThead}
                        className={classNames(
                          "__wab_instance",
                          sty.chakraUiThead
                        )}
                      >
                        <Tr
                          className={classNames(
                            "__wab_instance",
                            sty.chakraUiTr___4104W
                          )}
                        >
                          <Th
                            className={classNames(
                              "__wab_instance",
                              sty.chakraUiTh___03Ffr
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__oRls3
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__onge
                                )}
                              >
                                {"#"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__cqrNn
                                )}
                              >
                                {"NFTs Name"}
                              </div>
                            </div>
                          </Th>
                          <Th
                            className={classNames(
                              "__wab_instance",
                              sty.chakraUiTh___4KRxW
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xgDhx
                              )}
                            >
                              {"Type"}
                            </div>
                          </Th>
                          <Th
                            className={classNames(
                              "__wab_instance",
                              sty.chakraUiTh__dBmVq
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hSwjv
                              )}
                            >
                              {"Price"}
                            </div>
                          </Th>
                          <Th
                            className={classNames(
                              "__wab_instance",
                              sty.chakraUiTh__gXwvb
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__lZkgu
                              )}
                            >
                              {"Time"}
                            </div>
                          </Th>
                        </Tr>
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          []
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <Tr
                              className={classNames(
                                "__wab_instance",
                                sty.chakraUiTr__yxo3A
                              )}
                              key={currentIndex}
                            >
                              <Td
                                className={classNames(
                                  "__wab_instance",
                                  sty.chakraUiTd__tNbdm
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__nAbE
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__sYmhX
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.name;
                                        } catch (e) {
                                          if (e instanceof TypeError) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              </Td>
                              <Td
                                className={classNames(
                                  "__wab_instance",
                                  sty.chakraUiTd__vsjb
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__jCv2K
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__abgCz
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.type;
                                        } catch (e) {
                                          if (e instanceof TypeError) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              </Td>
                              <Td
                                className={classNames(
                                  "__wab_instance",
                                  sty.chakraUiTd__haaHc
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__qmG9
                                  )}
                                >
                                  <DropIcon
                                    className={classNames(
                                      "__wab_instance",
                                      sty.dropIcon__fWcdQ
                                    )}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__dhx27
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.price;
                                        } catch (e) {
                                          if (e instanceof TypeError) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___9AbWo
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return undefined;
                                      } catch (e) {
                                        if (e instanceof TypeError) {
                                          return "Table Cell";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </Td>
                              <Td
                                className={classNames(
                                  "__wab_instance",
                                  sty.chakraUiTd___31MjO
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__gyuzl
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.time;
                                      } catch (e) {
                                        if (e instanceof TypeError) {
                                          return "Table Cell";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </Td>
                            </Tr>
                          );
                        })}
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          []
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <Tr
                              className={classNames(
                                "__wab_instance",
                                sty.chakraUiTr__pYivz
                              )}
                              key={currentIndex}
                            >
                              <Td
                                className={classNames(
                                  "__wab_instance",
                                  sty.chakraUiTd__xc5WM
                                )}
                                isNumeric={false}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__pdj6A
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___37ZzL
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.name;
                                        } catch (e) {
                                          if (e instanceof TypeError) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              </Td>
                              <Td
                                className={classNames(
                                  "__wab_instance",
                                  sty.chakraUiTd__yAkL
                                )}
                                isNumeric={false}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__iKo
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.type;
                                      } catch (e) {
                                        if (e instanceof TypeError) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </Td>
                              <Td
                                className={classNames(
                                  "__wab_instance",
                                  sty.chakraUiTd___1P8Wl
                                )}
                                isNumeric={false}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__kutic
                                  )}
                                >
                                  <DropIcon
                                    className={classNames(
                                      "__wab_instance",
                                      sty.dropIcon__euQzj
                                    )}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__iAuHr
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.price;
                                        } catch (e) {
                                          if (e instanceof TypeError) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              </Td>
                              <Td
                                className={classNames(
                                  "__wab_instance",
                                  sty.chakraUiTd__aoaPk
                                )}
                                isNumeric={false}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__nTSf4
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.time;
                                      } catch (e) {
                                        if (e instanceof TypeError) {
                                          return "Table Cell";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </Td>
                              <Td
                                className={classNames(
                                  "__wab_instance",
                                  sty.chakraUiTd__rYZiF
                                )}
                                isNumeric={false}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__fCw2K
                                  )}
                                >
                                  {"NO DATA"}
                                </div>
                              </Td>
                            </Tr>
                          );
                        })}
                      </Thead>
                      <Tbody
                        className={classNames(
                          "__wab_instance",
                          sty.chakraUiTbody__ezim1
                        )}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $state.activities;
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <Tr
                              className={classNames(
                                "__wab_instance",
                                sty.chakraUiTr__zebPj
                              )}
                              key={currentIndex}
                            >
                              <Td
                                className={classNames(
                                  "__wab_instance",
                                  sty.chakraUiTd__liE8K
                                )}
                                isNumeric={false}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__dQuWp
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__yWhla
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.name;
                                        } catch (e) {
                                          if (e instanceof TypeError) {
                                            return "NFT's name";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              </Td>
                              <Td
                                className={classNames(
                                  "__wab_instance",
                                  sty.chakraUiTd__jiCeR
                                )}
                                isNumeric={false}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__lMe0H
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.type;
                                      } catch (e) {
                                        if (e instanceof TypeError) {
                                          return "NFT's type";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </Td>
                              <Td
                                className={classNames(
                                  "__wab_instance",
                                  sty.chakraUiTd___1I423
                                )}
                                isNumeric={false}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__sNom
                                  )}
                                >
                                  <DropIcon
                                    className={classNames(
                                      "__wab_instance",
                                      sty.dropIcon__bHt3W
                                    )}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__xgNaz
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.price;
                                        } catch (e) {
                                          if (e instanceof TypeError) {
                                            return "NFT's price";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              </Td>
                              <Td
                                className={classNames(
                                  "__wab_instance",
                                  sty.chakraUiTd__pDaf
                                )}
                                isNumeric={false}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__gz1Vd
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.time;
                                      } catch (e) {
                                        if (e instanceof TypeError) {
                                          return "NFT's time";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </Td>
                            </Tr>
                          );
                        })}
                        {(() => {
                          try {
                            return $state.activities.length === 0;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Tr
                            className={classNames(
                              "__wab_instance",
                              sty.chakraUiTr__zmiJy
                            )}
                          >
                            {(() => {
                              try {
                                return true;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <Td
                                className={classNames(
                                  "__wab_instance",
                                  sty.chakraUiTd__wiNjZ
                                )}
                                isNumeric={false}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__d5Xwh
                                  )}
                                >
                                  {"No Data"}
                                </div>
                              </Td>
                            ) : null}
                          </Tr>
                        ) : null}
                      </Tbody>
                      <Tbody
                        className={classNames(
                          "__wab_instance",
                          sty.chakraUiTbody__avR3Y
                        )}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          []
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <Tr
                              className={classNames(
                                "__wab_instance",
                                sty.chakraUiTr___8VwB
                              )}
                              key={currentIndex}
                            >
                              <Td
                                className={classNames(
                                  "__wab_instance",
                                  sty.chakraUiTd__a0FZt
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___4XAJx
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__iWyrL
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.name;
                                        } catch (e) {
                                          if (e instanceof TypeError) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              </Td>
                              <Td
                                className={classNames(
                                  "__wab_instance",
                                  sty.chakraUiTd__vAsE
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__kse0S
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__wbpkK
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.type;
                                        } catch (e) {
                                          if (e instanceof TypeError) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              </Td>
                              <Td
                                className={classNames(
                                  "__wab_instance",
                                  sty.chakraUiTd__jVyge
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___5JIgU
                                  )}
                                >
                                  <DropIcon
                                    className={classNames(
                                      "__wab_instance",
                                      sty.dropIcon___5CXPt
                                    )}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__x8038
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.price;
                                        } catch (e) {
                                          if (e instanceof TypeError) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              </Td>
                              <Td
                                className={classNames(
                                  "__wab_instance",
                                  sty.chakraUiTd___6AyUs
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__gxZ6J
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__wh6Gf
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.time;
                                        } catch (e) {
                                          if (e instanceof TypeError) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              </Td>
                            </Tr>
                          );
                        })}
                      </Tbody>
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        []
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <Tr
                            className={classNames(
                              "__wab_instance",
                              sty.chakraUiTr___9Nbmj
                            )}
                            key={currentIndex}
                          >
                            <Td
                              className={classNames(
                                "__wab_instance",
                                sty.chakraUiTd___3RdfK
                              )}
                              isNumeric={false}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___73PPj
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__th52I
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.name;
                                      } catch (e) {
                                        if (e instanceof TypeError) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </Td>
                            <Td
                              className={classNames(
                                "__wab_instance",
                                sty.chakraUiTd__mtaOg
                              )}
                              isNumeric={false}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__sHnG
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.type;
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </Td>
                            <Td
                              className={classNames(
                                "__wab_instance",
                                sty.chakraUiTd__osOM
                              )}
                              isNumeric={false}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___3Pla
                                )}
                              >
                                <DropIcon
                                  className={classNames(
                                    "__wab_instance",
                                    sty.dropIcon__ltvLq
                                  )}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__zmNa
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.price;
                                      } catch (e) {
                                        if (e instanceof TypeError) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </Td>
                            <Td
                              className={classNames(
                                "__wab_instance",
                                sty.chakraUiTd__gvLoT
                              )}
                              isNumeric={false}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__mEe6R
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.time;
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return "Table Cell";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </Td>
                            <Td
                              className={classNames(
                                "__wab_instance",
                                sty.chakraUiTd__w1WCa
                              )}
                              isNumeric={false}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__wZkQd
                                )}
                              >
                                {"NO DATA"}
                              </div>
                            </Td>
                          </Tr>
                        );
                      })}
                    </Table>
                  </TableContainer>
                </div>
              </TabPane>
            </Tabs>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "antdTabs",
    "searchNftName",
    "priceSortSelect",
    "listStatusSelect",
    "chakraUiButton",
    "listNftModal",
    "chakraUiNumberInput",
    "chakraUiNumberInputStepper",
    "listPriceInput",
    "confirmListingModal",
    "unlistModal",
    "searchNftActivityName",
    "activityTypeSelect",
    "chakraUiTableContainer",
    "chakraUiTable",
    "chakraUiThead",
    "footer"
  ],
  header: ["header"],
  antdTabs: [
    "antdTabs",
    "searchNftName",
    "priceSortSelect",
    "listStatusSelect",
    "chakraUiButton",
    "listNftModal",
    "chakraUiNumberInput",
    "chakraUiNumberInputStepper",
    "listPriceInput",
    "confirmListingModal",
    "unlistModal",
    "searchNftActivityName",
    "activityTypeSelect",
    "chakraUiTableContainer",
    "chakraUiTable",
    "chakraUiThead"
  ],
  searchNftName: ["searchNftName"],
  priceSortSelect: ["priceSortSelect"],
  listStatusSelect: ["listStatusSelect"],
  chakraUiButton: ["chakraUiButton"],
  listNftModal: [
    "listNftModal",
    "chakraUiNumberInput",
    "chakraUiNumberInputStepper",
    "listPriceInput",
    "confirmListingModal"
  ],
  chakraUiNumberInput: ["chakraUiNumberInput", "chakraUiNumberInputStepper"],
  chakraUiNumberInputStepper: ["chakraUiNumberInputStepper"],
  listPriceInput: ["listPriceInput"],
  confirmListingModal: ["confirmListingModal"],
  unlistModal: ["unlistModal"],
  searchNftActivityName: ["searchNftActivityName"],
  activityTypeSelect: ["activityTypeSelect"],
  chakraUiTableContainer: [
    "chakraUiTableContainer",
    "chakraUiTable",
    "chakraUiThead"
  ],
  chakraUiTable: ["chakraUiTable", "chakraUiThead"],
  chakraUiThead: ["chakraUiThead"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  antdTabs: typeof Tabs;
  searchNftName: typeof Input;
  priceSortSelect: typeof AntdSelect;
  listStatusSelect: typeof AntdSelect;
  chakraUiButton: typeof Button;
  listNftModal: typeof AntdModal;
  chakraUiNumberInput: typeof NumberInput;
  chakraUiNumberInputStepper: typeof NumberInputStepper;
  listPriceInput: typeof AntdInputNumber;
  confirmListingModal: typeof AntdModal;
  unlistModal: typeof AntdModal;
  searchNftActivityName: typeof Input;
  activityTypeSelect: typeof AntdSelect;
  chakraUiTableContainer: typeof TableContainer;
  chakraUiTable: typeof Table;
  chakraUiThead: typeof Thead;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUserProfile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUserProfile__VariantsArgs;
    args?: PlasmicUserProfile__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUserProfile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicUserProfile__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUserProfile__ArgProps,
          internalVariantPropNames: PlasmicUserProfile__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUserProfile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUserProfile";
  } else {
    func.displayName = `PlasmicUserProfile.${nodeName}`;
  }
  return func;
}

export const PlasmicUserProfile = Object.assign(
  // Top-level PlasmicUserProfile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    antdTabs: makeNodeComponent("antdTabs"),
    searchNftName: makeNodeComponent("searchNftName"),
    priceSortSelect: makeNodeComponent("priceSortSelect"),
    listStatusSelect: makeNodeComponent("listStatusSelect"),
    chakraUiButton: makeNodeComponent("chakraUiButton"),
    listNftModal: makeNodeComponent("listNftModal"),
    chakraUiNumberInput: makeNodeComponent("chakraUiNumberInput"),
    chakraUiNumberInputStepper: makeNodeComponent("chakraUiNumberInputStepper"),
    listPriceInput: makeNodeComponent("listPriceInput"),
    confirmListingModal: makeNodeComponent("confirmListingModal"),
    unlistModal: makeNodeComponent("unlistModal"),
    searchNftActivityName: makeNodeComponent("searchNftActivityName"),
    activityTypeSelect: makeNodeComponent("activityTypeSelect"),
    chakraUiTableContainer: makeNodeComponent("chakraUiTableContainer"),
    chakraUiTable: makeNodeComponent("chakraUiTable"),
    chakraUiThead: makeNodeComponent("chakraUiThead"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicUserProfile
    internalVariantProps: PlasmicUserProfile__VariantProps,
    internalArgProps: PlasmicUserProfile__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicUserProfile;
/* prettier-ignore-end */
